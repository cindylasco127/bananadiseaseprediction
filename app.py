# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fATFZtyTwdjnqTgCSan8UCs40tzbTjll
"""

# Importing Libraries
import streamlit as st
from PIL import Image
import numpy as np
import tensorflow.keras as keras
import matplotlib.pyplot as plt
import tensorflow_hub as hub

hide_streamlit_style = """
            
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            
            """
st.markdown(hide_streamlit_style, unsafe_allow_html = True)

# Title and Description
st.title('Banana Disease Classifier')
st.markdown("Prediction of Disease on Banana Leaf")

st.write("Upload an image of the banana leaf and get prediction whether it is a healthy leaf or has diseases. If the leaf has a disease, the classifier can determine whether it has Bunchy Top, Moko, Fusarium Wilt or Sigatoka disease.")
st.write("")

# Upload the image
def main() :
    file_uploaded = st.file_uploader('Choose an image...', type=["png", "jpg", "jpeg"])
    if file_uploaded is not None :
        image = Image.open(file_uploaded)
        st.write("Uploaded Image.")
        figure = plt.figure()
        plt.imshow(image)
        plt.axis('off')
        st.pyplot(figure)
        result, confidence = predict_class(image)
        st.write('Prediction : {}'.format(result))
        st.write('Confidence : {}%'.format(confidence))

# Loading Model and getting the predictions fom the model
def predict_class(image) :
    with st.spinner('Loading Model...'):
        classifier_model = keras.models.load_model(r'resnet50-model.h5', compile = False)

    shape = ((224,224,3))
    model = keras.Sequential([hub.KerasLayer(classifier_model, input_shape = shape)])    
    test_image = image.resize((224, 224))
    test_image = keras.preprocessing.image.img_to_array(test_image)
    test_image = keras.applications.resnet50.preprocess_input
    test_image = np.expand_dims(test_image, axis = 0)
    class_name = ['Bunchy Top', 'Fusarium Wilt', 'Healthy', 'Moko', 'Sigatoka']

    prediction = model.predict(test_image)
    confidence = round(100 * (np.max(prediction[0])), 2)
    final_pred = class_name[np.argmax(prediction)]
    return final_pred, confidence

footer = """
a:link , a:visited{
    color: white;
    background-color: transparent;
    text-decoration: None;
}

a:hover,  a:active {
    color: red;
    background-color: transparent;
    text-decoration: None;
}

.footer {
    position: fixed;
    left: 0;
    bottom: 0;
    width: 100%;
    background-color: transparent;
    color: black;
    text-align: center;
}

“”” st.markdown(footer, unsafe_allow_html = True) if __name__ 
== ‘__main__’ : main() 
